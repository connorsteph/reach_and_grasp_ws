// Generated by gencpp from file hil_servoing/ErrorInfo.msg
// DO NOT EDIT!


#ifndef HIL_SERVOING_MESSAGE_ERRORINFO_H
#define HIL_SERVOING_MESSAGE_ERRORINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hil_servoing
{
template <class ContainerAllocator>
struct ErrorInfo_
{
  typedef ErrorInfo_<ContainerAllocator> Type;

  ErrorInfo_()
    : error()
    , error_dim()  {
    }
  ErrorInfo_(const ContainerAllocator& _alloc)
    : error(_alloc)
    , error_dim(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _error_type;
  _error_type error;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _error_dim_type;
  _error_dim_type error_dim;




  typedef boost::shared_ptr< ::hil_servoing::ErrorInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hil_servoing::ErrorInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ErrorInfo_

typedef ::hil_servoing::ErrorInfo_<std::allocator<void> > ErrorInfo;

typedef boost::shared_ptr< ::hil_servoing::ErrorInfo > ErrorInfoPtr;
typedef boost::shared_ptr< ::hil_servoing::ErrorInfo const> ErrorInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hil_servoing::ErrorInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hil_servoing::ErrorInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hil_servoing

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'hil_servoing': ['/home/froglake/reach_and_grasp_ws/src/hil_servoing/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hil_servoing::ErrorInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hil_servoing::ErrorInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hil_servoing::ErrorInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hil_servoing::ErrorInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hil_servoing::ErrorInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hil_servoing::ErrorInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hil_servoing::ErrorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd09ce1fe00fe4b7efe98df71a039f2a";
  }

  static const char* value(const ::hil_servoing::ErrorInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd09ce1fe00fe4b7ULL;
  static const uint64_t static_value2 = 0xefe98df71a039f2aULL;
};

template<class ContainerAllocator>
struct DataType< ::hil_servoing::ErrorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hil_servoing/ErrorInfo";
  }

  static const char* value(const ::hil_servoing::ErrorInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hil_servoing::ErrorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] error\n\
float64[] error_dim\n\
";
  }

  static const char* value(const ::hil_servoing::ErrorInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hil_servoing::ErrorInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error);
      stream.next(m.error_dim);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ErrorInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hil_servoing::ErrorInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hil_servoing::ErrorInfo_<ContainerAllocator>& v)
  {
    s << indent << "error[]" << std::endl;
    for (size_t i = 0; i < v.error.size(); ++i)
    {
      s << indent << "  error[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.error[i]);
    }
    s << indent << "error_dim[]" << std::endl;
    for (size_t i = 0; i < v.error_dim.size(); ++i)
    {
      s << indent << "  error_dim[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.error_dim[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIL_SERVOING_MESSAGE_ERRORINFO_H
