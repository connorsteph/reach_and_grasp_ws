// Generated by gencpp from file wam_control/GetToolPoseRequest.msg
// DO NOT EDIT!


#ifndef WAM_CONTROL_MESSAGE_GETTOOLPOSEREQUEST_H
#define WAM_CONTROL_MESSAGE_GETTOOLPOSEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wam_control
{
template <class ContainerAllocator>
struct GetToolPoseRequest_
{
  typedef GetToolPoseRequest_<ContainerAllocator> Type;

  GetToolPoseRequest_()
    : joint_position()  {
    }
  GetToolPoseRequest_(const ContainerAllocator& _alloc)
    : joint_position(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _joint_position_type;
  _joint_position_type joint_position;




  typedef boost::shared_ptr< ::wam_control::GetToolPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_control::GetToolPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetToolPoseRequest_

typedef ::wam_control::GetToolPoseRequest_<std::allocator<void> > GetToolPoseRequest;

typedef boost::shared_ptr< ::wam_control::GetToolPoseRequest > GetToolPoseRequestPtr;
typedef boost::shared_ptr< ::wam_control::GetToolPoseRequest const> GetToolPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wam_control::GetToolPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wam_control::GetToolPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wam_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'wam_control': ['/home/froglake/reach_and_grasp_ws/src/wam_control/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wam_control::GetToolPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_control::GetToolPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wam_control::GetToolPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wam_control::GetToolPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_control::GetToolPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_control::GetToolPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wam_control::GetToolPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3bded87cd58d0b6c5572baaa0e3ffed";
  }

  static const char* value(const ::wam_control::GetToolPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa3bded87cd58d0b6ULL;
  static const uint64_t static_value2 = 0xc5572baaa0e3ffedULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_control::GetToolPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wam_control/GetToolPoseRequest";
  }

  static const char* value(const ::wam_control::GetToolPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wam_control::GetToolPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] joint_position\n\
";
  }

  static const char* value(const ::wam_control::GetToolPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wam_control::GetToolPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetToolPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_control::GetToolPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wam_control::GetToolPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_position[]" << std::endl;
    for (size_t i = 0; i < v.joint_position.size(); ++i)
    {
      s << indent << "  joint_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAM_CONTROL_MESSAGE_GETTOOLPOSEREQUEST_H
